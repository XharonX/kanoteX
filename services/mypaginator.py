from django.core.paginator import Paginator, Page, PageNotAnIntegerfrom datetime import datetime, timedeltaclass WeekPaginator(Paginator):    def __init__(self, object_list, per_week=0, orphans=0, allow_empty_first_page=True):        super().__init__(object_list, per_week, orphans, allow_empty_first_page)        self.per_week = per_week    def num_pages(self):        return int(datetime.date(datetime.today()).isocalendar()[1])    def page(self, number):        return WeeklyPage(self.object_list, number, self)class WeeklyPage(Page):    def __init__(self, object_list, number, paginator):        self.object_list = object_list        self.number = number        self.number = int(self.number)        self.paginator = paginator        self.object_list = self.get_items_per_week()        super().__init__(self.object_list, number, paginator)    def get_items_per_week(self):        items = list()        for item in self.object_list:            item_date = int(datetime.date(item.received_at).isocalendar()[1])            if self.number == item_date:                items.append(item)        print(len(items))        return items    def has_previous(self):        return int(self.number) > 1    def has_next(self):        return int(self.number) < self.paginator.num_pages()    def previous_page_number(self):        number = int(self.number)        return number - 1    def next_page_number(self):        number = int(self.number)        return number + 1    def end_index(self):        if self.number == self.paginator.num_pages():            print(self.number)            return self.number        return self.paginator.num_pages()