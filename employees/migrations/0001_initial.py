# Generated by Django 4.2.7 on 2023-12-29 16:46

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='department')),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='position')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email')),
                ('salary', models.IntegerField(blank=True, default=0, null=True, verbose_name='salary')),
                ('contact', models.CharField(blank=True, max_length=12, verbose_name='phone')),
                ('gender', models.CharField(blank=True, choices=[('male', 'male'), ('female', 'female'), ('none', 'none')], default=None, max_length=10, verbose_name='gender')),
                ('age', models.IntegerField(blank=True, verbose_name='age')),
                ('dept', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dept', to='employees.department')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='position', to='employees.position')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'employee',
                'verbose_name_plural': 'employees',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Others',
            fields=[
            ],
            options={
                'verbose_name': 'Others',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('employees.employee',),
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
            ],
            options={
                'verbose_name': 'Sale',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('employees.employee',),
        ),
        migrations.CreateModel(
            name='Technician',
            fields=[
            ],
            options={
                'verbose_name': 'Technician',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('employees.employee',),
        ),
    ]
