from productions.models import Productfrom .models import Servicing, ErrorReturnfrom datetime import datetime, timezonefrom django import formsdef get_product_selections():    choices = [['', 'Select the product code']]    for p in Product.objects.all():        choices.append((p, p))    return choicesdef get_reversed_years(year_range):    today = datetime.now(tz=timezone.utc)    D = {        'year': [],        'month': [],        'day': []    }    for year in range(today.year, today.year - year_range, -1):        D['year'].append(year)    return D['year']class ServiceForm(forms.ModelForm):    customer = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={        'class': 'form-control',        'placeholder': 'customer name',        'autocomplete': 'off',        'id': 'customerName'    }))    purchased_date = forms.DateTimeField(required=True, input_formats="%d-%m-%Y", widget=forms.SelectDateWidget(        years=get_reversed_years(3),        attrs={            'placeholder': 'purchase date',            'class': 'form-control',            'data-target': '#datetimepicker1',            'type': 'date',            'id': 'purchasedDate',            'style': 'height: 3rem;'        }))    purchased_shop = forms.CharField(required=True, widget=forms.TextInput(attrs={        'class': 'form-control',        'placeholder': 'eg. Junction City',        'id': 'purchaseShop',    }))    product = forms.ModelChoiceField(queryset=Product.objects.all(), empty_label='Select the product code', widget=forms.Select(attrs={        'class': 'form-control ',        'id': 'productCode',        'style': 'width: 15rem',    }))    so_no = forms.CharField(max_length=15, required=False, widget=forms.TextInput(attrs={        'class': 'form-control rounded-4',        'placeholder': 'eg. SO-12340',        'id': 'soNo',    }))    qty = forms.IntegerField(required=True, widget=forms.NumberInput(attrs={        'class': 'form-control rounded-pill offset-md-4',        'placeholder': 'eg. 1',        'id': 'productCode',        'min': 1,        'style': ' width: 100px',    }))    accessories = forms.CharField(required=True, widget=forms.TextInput(attrs={        'class': 'form-control rounded-4 me-4 py-2 px-3',        'placeholder': 'eg. item only or all accessories',        'id': 'accessories',    }))    user_dmg = forms.CharField(required=True, widget=forms.TextInput(attrs={        'class': 'form-control rounded-4 py-2 me-5',        'placeholder': 'eg. ကလောတံဖြင့် ထိုးထား၊ ပြင်းထန်ပြုတ်ကျ',        'id': 'phy-dmg',    }))    reason = forms.CharField(required=True, widget=forms.Textarea(attrs={        'class': 'form-control rounded-4',        'placeholder': 'eg. battery ဖောင်းသွားပါသဖြင့်',        'id': 'reason',        'style': 'height: 6rem;'    }))    how = forms.CharField(required=True, widget=forms.Textarea(attrs={        'class': 'form-control rounded-4',        'placeholder': 'customer သို့မေးမြန်းရန်။ eg.သုံးနေရင်းအလိုလို ရပ်သွားတာ',        'id': 'happened',        'style': 'height: 6rem;'    }))    class Meta:        model = ErrorReturn        fields = '__all__'        exclude = ['received_by', 'received_at', 'modified_date', 'status' ]class TechFindingForm(forms.ModelForm):    finding = forms.CharField(required=True, widget=forms.Textarea(attrs={        'class': 'form-control',        'placeholder': 'eg. battery ဖောင်းနေပါသည်။ error မှန်ကန်ပါသည်။',        'id': 'techFinding',        'style': 'height: 6rem;'    }))    fnl_decision = forms.CharField(label="Final Decision", required=True, widget=forms.TextInput(attrs={        'class': 'form-control',        'placeholder': 'eg. အသစ်အလဲပေးသည်။',        'id': 'finalResult',    }))    fees = forms.FloatField(widget=forms.NumberInput(attrs={        'min': '0',        'class': 'form-control',        'id': 'serviceFees',        'style': 'width: 150px;'    }))    fees_by = forms.ChoiceField(initial='comp',                                choices=[('cust', 'customer'), ('comp', 'company')],                                widget=forms.RadioSelect(attrs={                                        'class': 'form-check-input',                                    }))    class Meta:        model = Servicing        fields = '__all__'        exclude = ['form', 'technician']class ErrorExchangeRejectForm(forms.Form):    start_date = forms.DateTimeField(widget=forms.SelectDateWidget(years=get_reversed_years(3)))    end_date = forms.DateTimeField(widget=forms.SelectDateWidget(years=get_reversed_years(3),))    status = forms.ChoiceField(initial='approved', choices=[('approved', 'approved'), ('pending', 'pending')], widget=forms.Select())    exclude_product = forms.ModelChoiceField(queryset=Product.objects.all(), empty_label='Select the product code', widget=forms.SelectMultiple())